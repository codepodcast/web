<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Code Podcast</title><link href="http://codepodcast.com/" rel="alternate"></link><link href="http://feed.codepodcast.com/feeds/all.atom.xml" rel="self"></link><id>http://codepodcast.com/</id><updated>2016-04-15T19:30:00+00:00</updated><entry><title>Episode 3. Concurrency – Event loop &amp; Сoroutines</title><link href="http://codepodcast.com/s0e3.html" rel="alternate"></link><updated>2016-04-15T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-04-15:s0e3.html</id><summary type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/259065020&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;h2&gt;Concurrency - Event loop &amp;amp; Сoroutines&lt;/h2&gt;
&lt;p&gt;Let`s escape the world where the Big Brother constantly interrupts you. Free
ourselves from the oppression of consumerism. Forget about preemptive
multitasking and enter the world of collaboration! Today we are talking about
Event Loop and Coroutines.&lt;/p&gt;
&lt;p&gt;Please send us stories about your awkward tech talks!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/podcastcode"&gt;@podcastcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;andrey@codepodcast.com or michael@codepodcast.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dark side:&lt;/strong&gt; Michael Beschastnov&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A. Jesse Jiryu Davis&lt;/strong&gt; &lt;a href="https://emptysqua.re/blog/"&gt;emptysqua.re/&lt;/a&gt; &lt;a href="https://github.com/ajdavis"&gt;github.com/ajdavis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Saúl Ibarra Corretgé&lt;/strong&gt; &lt;a href="https://about.me/saghul"&gt;about.me/saghul&lt;/a&gt; &lt;a href="https://github.com/saghul"&gt;github/saghul&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A much smarter way to spend your money&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The Architecture of Open Source Applications &lt;a href="http://aosabook.org/en/buy.html#vol1"&gt;aosabook.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Event loops&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;What the heck is the event loop anyway? by Philip Roberts &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;youtube.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An Introduction to libuv by Nikhil Marathe &lt;a href="https://nikhilm.github.io/uvbook/"&gt;nikhilm.github.io/uvbook/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Taming the asynchronous beast with ES7 by Nolan Lawson &lt;a href="https://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html"&gt;https://pouchdb.com/2015/03/05/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How the heck does async/await work in Python 3.5? by Brett Cannon &lt;a href="http://www.snarky.ca/how-the-heck-does-async-await-work-in-python-3-5"&gt;www.snarky.ca/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coroutines&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Coroutines Live-Coding Demonstration, at SCALE14x by A. Jesse Jiryu Davis &lt;a href="https://emptysqua.re/blog/scale14x-coroutines-talk/"&gt;emptysqua.re/blog/scale14x-coroutines-talk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Web Crawler With asyncio Coroutines from The Architecture Of Open Source Applications by A. Jesse Jiryu Davis and Guido van Rossum &lt;a href="http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html"&gt;aosabook.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unyielding by Glyph Lefkowitz &lt;a href="https://glyph.twistedmatrix.com/2014/02/unyielding.html"&gt;glyph.twistedmatrix.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Curious Course on Coroutines and Concurrency by David Beazley &lt;a href="http://www.dabeaz.com/coroutines/"&gt;www.dabeaz.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generator Tricks for Systems Programmers by David Beazley &lt;a href="http://www.dabeaz.com/generators/"&gt;www.dabeaz.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects to check out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Pyuv &lt;a href="https://github.com/saghul/pyuv"&gt;github.com/saghul/pyuv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pymongo &lt;a href="https://api.mongodb.org/python/current/index.html"&gt;api.mongodb.org/python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Asyncio &lt;a href="http://asyncio.org/"&gt;asyncio.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;curio - concurrent I/O &lt;a href="https://github.com/dabeaz/curio"&gt;github.com/dabeaz/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tornado Web Server &lt;a href="https://github.com/tornadoweb/tornado"&gt;github.com/tornadoweb/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;libuv &lt;a href="http://docs.libuv.org/en/v1.x/"&gt;docs.libuv.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Music&lt;/h3&gt;
&lt;p&gt;Mid-Air! &lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;</summary></entry><entry><title>Episode 2. Concurrency – CSP &amp; Actors</title><link href="http://codepodcast.com/s0e2.html" rel="alternate"></link><updated>2016-02-24T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-02-24:s0e2.html</id><summary type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/248919399&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;h2&gt;Concurrency – CSP &amp;amp; Actors&lt;/h2&gt;
&lt;p&gt;Multithreading is not the only approach we use to deal with concurrency. Single-purpose processes is our next frontier. Processes, that don`t have shared state. To coordinate, they pass messages to each other.&lt;/p&gt;
&lt;p&gt;We can build complex concurrent systems using simple principles of CSP or Actors model. We break down programs into independent processes, each performing some specific job, talking to each other. How they talk to each is the point of contention here. That`s where the differences between CSP and Actors arise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aaron Schlesinger&lt;/strong&gt; &lt;a href="http://arschles.com/"&gt;arschles.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jörgen Brandt&lt;/strong&gt; &lt;a href="http://www.joergen-brandt.de/"&gt;http://www.joergen-brandt.de/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“Communicating Sequential Processes” orignial paper by C. A. R. Hoare &lt;a href="http://www.usingcsp.com/cspbook.pdf"&gt;http://www.usingcsp.com/  cspbook.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;“Go in 5 minutes” screencast by Aaron &lt;a href="https://www.youtube.com/channel/UC2GHqYE3fVJMncbrRd8AqcA"&gt;https://www.youtube.com/channel/UC2GHqYE3fVJMncbrRd8AqcA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Effective Go” &lt;a href="https://golang.org/doc/effective_go.html"&gt;https://golang.org/doc/effective_go.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Go Concurrency Patterns” talk by Rob Pike &lt;a href="https://talks.golang.org/2012/concurrency.slide#1"&gt;https://talks.golang.org/2012/concurrency.slide#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;net.Context documentation: &lt;a href="https://godoc.org/golang.org/x/net/context"&gt;https://godoc.org/golang.org/x/net/context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebSockets documentation: &lt;a href="https://godoc.org/golang.org/x/net/websocket"&gt;https://godoc.org/golang.org/x/net/websocket&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Actors&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“A Universal Modular Actor Formalism for Artificial Intelligence” original paper by Carl Hewitt; Peter Bishop; Richard Steiger &lt;a href="http://worrydream.com/refs/Hewitt-ActorModel.pdf"&gt;http://worrydream.com/refs/Hewitt-ActorModel.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Erlang&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;“Learn You Some Erlang for great good!” by Fred Hébert &lt;a href="http://learnyousomeerlang.com/"&gt;http://learnyousomeerlang.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Programming Erlang” by Joe Armstrong &lt;a href="http://amzn.to/1UnfJpB"&gt;http://amzn.to/1UnfJpB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects to check out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Docker &lt;a href="https://github.com/docker/docker"&gt;https://github.com/docker/docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Awesome Go” – a curated list of awesome Go frameworks, libraries and software &lt;a href="https://github.com/avelino/awesome-go"&gt;https://github.  com/avelino/awesome-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallelism&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cuneiform &lt;a href="http://www.cuneiform-lang.org/"&gt;http://www.cuneiform-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Music&lt;/h3&gt;
&lt;p&gt;Mid-Air! &lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;PS: Links to Amazon are referral. You can use them to support the show.&lt;/p&gt;</summary></entry><entry><title>Episode 1. Concurrency</title><link href="http://codepodcast.com/s0e1.html" rel="alternate"></link><updated>2016-02-04T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-02-04:s0e1.html</id><summary type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/245483308&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;Laws of Newtonian mechanics don`t make sense as we get closer to the speed of light. Laws of serial execution are useless once we enter the world of concurrency.&lt;/p&gt;
&lt;p&gt;In this episode we&lt;code&gt;ll define concurrency and talk about why is it hard to write concurrent programs. With the help of Daniel and Steve we&lt;/code&gt;ll explore tools that are there in Clojure and Rust to help engineers deal with multiple threads of execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Daniel Higginbotham&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="www.flyingmachinestudios.com/"&gt;www.flyingmachinestudios.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nonrecursive"&gt;twitter.com/nonrecursive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steve Klabnik&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="www.steveklabnik.com/"&gt;www.steveklabnik.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/steveklabnik"&gt;twitter.com/steveklabnik&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IRC: steveklabnik&lt;/p&gt;
&lt;h3&gt;A much smarter way to spend your money&lt;/h3&gt;
&lt;p&gt;Clojure for the Brave and True, Daniel Higginbotham&lt;/p&gt;
&lt;p&gt;Online: &lt;a href="www.braveclojure.com/concurrency/"&gt;www.braveclojure.com/concurrency/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chapter about concurrency: &lt;a href="www.braveclojure.com/concurrency/"&gt;www.braveclojure.com/concurrency/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon: &lt;a href="www.amzn.to/1UOB49u"&gt;amzn.to/1UOB49u&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java Concurrency in Practice: &lt;a href="http://amzn.to/1PVlDbm"&gt;http://amzn.to/1PVlDbm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust Documentation: &lt;a href="http://www.rust-lang.org/documentation.html"&gt;http://www.rust-lang.org/documentation.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects to Check Out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;intermezzOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;intermezzOS is a teaching operating system, specifically focused on introducing systems programming concepts to experienced developers from other areas of programming.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://intermezzos.github.io"&gt;https://intermezzos.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Issues:
&lt;a href="https://github.com/intermezzOS/book/issues"&gt;https://github.com/intermezzOS/book/issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/intermezzOS/kernel/issues"&gt;https://github.com/intermezzOS/kernel/issues&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;Mid-Air!
&lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Episode 1 preview</title><link href="http://codepodcast.com/first-episode-preview.html" rel="alternate"></link><updated>2016-01-31T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-01-31:first-episode-preview.html</id><summary type="html">&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;def post()&lt;/p&gt;
&lt;p&gt;Hi guys, super-excited to spread a bit of rumor around first episode of code podcast. 
In first post it was claimed that beautiful patterns are present in completely different environments and episode 0 will be so much more about it. 
Episode 0 main topic is concurrency. Oh yes, what can be more exciting than that? You`ll hear about threads, loops, processes, green threads and there will be several guests that we are not yet unveiling, but these will be mega-awesome folks that you do not want to miss. &lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;</summary></entry><entry><title>Episode0. main()</title><link href="http://codepodcast.com/s0e0.html" rel="alternate"></link><updated>2016-01-31T19:30:00+00:00</updated><author><name>Michael Beschastnov</name></author><id>tag:codepodcast.com,2016-01-31:s0e0.html</id><summary type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/243553280&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;Code is about concepts behind programming languages, frameworks and libraries. Same beautiful patterns that are present in completely different environments. Occasionally we will invite clever programmers to talk about their favourite techniques. &lt;/p&gt;</summary></entry><entry><title>Hello World</title><link href="http://codepodcast.com/code-podcast-soon.html" rel="alternate"></link><updated>2016-01-20T19:30:00+00:00</updated><author><name>Michael Beschastnov</name></author><id>tag:codepodcast.com,2016-01-30:code-podcast-soon.html</id><summary type="html">&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;Hello world! Code podcast launching soon. &lt;/p&gt;</summary></entry></feed>