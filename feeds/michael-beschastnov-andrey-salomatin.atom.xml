<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Code Podcast - Michael Beschastnov | Andrey Salomatin</title><link href="http://codepodcast.com/" rel="alternate"></link><link href="http://codepodcast.com/feeds/michael-beschastnov-andrey-salomatin.atom.xml" rel="self"></link><id>http://codepodcast.com/</id><updated>2017-03-03T00:00:00+00:00</updated><entry><title>Episode #5 Script</title><link href="http://codepodcast.com/s0e5-script.html" rel="alternate"></link><published>2017-03-03T00:00:00+00:00</published><updated>2017-03-02T20:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2017-03-03:/s0e5-script.html</id><summary type="html">&lt;p&gt;We've recently released &lt;a href="codepodcast.com/s0e5.html"&gt;the episode about type systems&lt;/a&gt;. To give you more context, I've refactored the script of the episode and added examples.&lt;/p&gt;</summary><content type="html">&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;h1&gt;Type Systems, collateral&lt;/h1&gt;
&lt;p&gt;We've recently released &lt;a href="codepodcast.com/s0e5.html"&gt;the episode about type systems&lt;/a&gt;. To give you more context, I've refactored the script of the episode and added examples.&lt;/p&gt;
&lt;h2&gt;Hardworking Carpenters&lt;/h2&gt;
&lt;p&gt;Type System is like Ikea furniture. It ensures that parts that don't belong together won't fit. For a person who assembles the furniture, mistakes are harder to make. Still possible, just hard. On the other hand, we can always go to a building materials store. Buy wood and nails. And build furniture on our own. This what writing Clojure or JavaScript feels like. We'll not talk about it today.&lt;/p&gt;
&lt;p&gt;Here's the definition from "Types and Programming Languages" by Benjamin Pierce.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A type system is a tractable syntactic method for proving the absence of
certain program behaviors by classifying phrases according to the kinds of values they compute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's impossible to prove that a program has no mistakes. Types make sure that certain kinds of errors will never happen. We, programmers, assign types to expressions, so the type system knows what kind of values are "legal" and what is expected.&lt;/p&gt;
&lt;h2&gt;Types, what's in store?&lt;/h2&gt;
&lt;p&gt;Modern type systems can do things. Cool things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Simple checks. TS will tell you if you're passing an integer to a function that excepts a string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type system gives us ways to write abstract code. It reduces code duplication and makes the code easier to read.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's a documentation tool. Type information is used by people and static analysis tools. Autocomplete in an IDE is one example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compilers can use type information to make the program more efficient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type systems can ensure language safety. That's a tricky one. Let me quote Pierce again. He's talking about a safe language:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;A programmer using this language then expects that an array can be changed only by using the update operation on it explicitly — and not, for example by writing past the end of some data structure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Y'all Fancy&lt;/h2&gt;
&lt;p&gt;It's hard to classify Type Systems. We'll be talking more about type system features rather than concrete languages.&lt;/p&gt;
&lt;p&gt;We'll sometimes use the expression "fancy type system" to refer to those that focus on powerful abstractions rather than simple checks. Type systems that are used in languages like Haskell, OCaml, F# and so on.&lt;/p&gt;
&lt;h2&gt;Check it out&lt;/h2&gt;
&lt;p&gt;JavaScript doesn't have a static type system. It's a design choice. The users that miss perks of types came up with TypeScript. They introduced extra syntax to declare types and wrote a type checker and a compiler to javascript.&lt;/p&gt;
&lt;p&gt;TypeScript is a good example of a language that's focusing on &lt;em&gt;checks&lt;/em&gt; and &lt;em&gt;documentation&lt;/em&gt;. TypeScript compiler doesn't do any type-based optimizations, to keep the JS output predictable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * In pure JS we&amp;#39;d write types in the comments.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @param {String} name&lt;/span&gt;
&lt;span class="cm"&gt; * @param {Image} palm&lt;/span&gt;
&lt;span class="cm"&gt; * @return {Faith}&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tellFortune&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;palm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * In TypeScript, types will be enforced. Also, tools can use the type&lt;/span&gt;
&lt;span class="cm"&gt; * information.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tellFortune&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;palm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Faith&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Keep it Classy&lt;/h2&gt;
&lt;p&gt;Type Systems in TypeScript, Java and C# give us two main tools to create abstractions: classes and interfaces.&lt;/p&gt;
&lt;p&gt;Classes describe both a public signature of the object and the implementation. Interfaces only describe the signature.&lt;/p&gt;
&lt;p&gt;In Java, a class always extends one other class. It also may implement one or more interfaces.&lt;/p&gt;
&lt;p&gt;Interfaces allow us to treat objects with different classes similarly. For instance, in Java, we have an interface called Comparable. If we were to write a sorting function, it would take an array of Comparable elements as an argument. It doesn't matter what the elements actually are, if it's Strings or Integers or Money, the sorting function will treat them in the same way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ComparableToOranges&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orange&lt;/span&gt; &lt;span class="n"&gt;orange&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Apple&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ComparableToOranges&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orange&lt;/span&gt; &lt;span class="n"&gt;orange&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Orange&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ComparableToOranges&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orange&lt;/span&gt; &lt;span class="n"&gt;orange&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Don&amp;#39;t have to write separate functions for Apples and Oranges!&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;sortOranges&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ComparableToOranges&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;kindaOranges&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With classes, a subclass inherits the code of its parent. So classes solve the same problem as interfaces. They minimize code duplication, but they do it  from a different angle.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultOrange&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;peel&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{...}&lt;/span&gt;
  &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getTaste&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Don&amp;#39;t have to reimplement `peel()`!&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MoroccanOrange&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;DefaultOrange&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@Override&lt;/span&gt;
  &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getTaste&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;amazing!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Parametric types&lt;/h2&gt;
&lt;p&gt;One powerful feature that many type systems have is &lt;strong&gt;parametric types&lt;/strong&gt; or &lt;strong&gt;generics&lt;/strong&gt;. TypeScript, Java, Haskell and other languages have it. Go, infamously, doesn't have it.&lt;/p&gt;
&lt;p&gt;The simplest example is a List of things. Sometimes we'd like to reflect in the type, which properties do things in a specific list have. What we can and can not do with those things. For example, if we have a list of comparable things, we can sort it. If we have a list of numbers, we can some them up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Can&amp;#39;t do much with the values of this list.&lt;/span&gt;
&lt;span class="c1"&gt;// Can only do operations on the list itself: get the length, slice and so on.&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Can sort the values of this list.&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Algebraic!&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Algebraic! Adventure Time" src="https://cloud.githubusercontent.com/assets/610717/23235064/6cb40f8a-f954-11e6-9d1e-01adbe0cc5df.png"&gt;&lt;/p&gt;
&lt;p&gt;One powerful instrument that Java or C# don't support is a &lt;strong&gt;Sum Type&lt;/strong&gt; also called a &lt;strong&gt;Union Type&lt;/strong&gt;. Sum type is a part of a larger concept that's called Algebraic Data Type, or ADT for short. When people talk about languages that support ADT they often mean languages that support a Sum Type. There's also a Product Type, but that one is supported by most of the Type Systems out there.&lt;/p&gt;
&lt;p&gt;Let's start with the &lt;strong&gt;Product Type&lt;/strong&gt; because it's a simpler one. Product Type is also sometimes called a Tuple Type. For example, type "Person" could be a combination of two Strings, first name and last name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Person is a Product Type&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Person&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Person&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

&lt;span class="c1"&gt;-- Names of the fields are not part of the type. It&amp;#39;s just syntax&lt;/span&gt;
&lt;span class="c1"&gt;-- sugar. This is the same *type* as above:&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Person&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So what's the &lt;em&gt;Sum Type&lt;/em&gt; and what's the big deal about it? Let's say you're talking to a doctor.. at some point they ask you how you are feeling. Depending on a situation you may say "I'm feeling good". Or you may say "I'm feeling sick" and you would go on to describe the symptoms and when it started and what you've been doing about it.&lt;/p&gt;
&lt;p&gt;What's the type of your answer if you can only be in two states? In C++ or Java, we could use an Enum with two values "Healthy" or "Sick". But how would we encode all that extra information that comes with the "Sick" state?&lt;/p&gt;
&lt;p&gt;Another way to look at it is to say there's a type called Healthy and there's a type called "Sick" and the "Sick" type has extra information that comes with it like a list of symptoms, a start date, a list of preventive measures. And the type of the Answer is a union of those to two types. It's an Either Healthy or Sick type, so to say.&lt;/p&gt;
&lt;p&gt;Another example. A Union Type could be used to describe a networking state. We're either connecting, connected or disconnected. Each concrete state might have extra specific details to it. "Duration of connection" for instance is only relevant for "Connected" state, it doesn't make sense unless we're connected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Healthy&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Healthy&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Sick&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Sick&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;symptoms&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dateStarted&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Day&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;AnswerToTheDoctor&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Healthy&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Sick&lt;/span&gt;

&lt;span class="c1"&gt;--&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Connecting&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Connecting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;UTCTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Connected&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Connected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesTransferred&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Disconnected&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Disconnected&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;ConnectionState&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Connecting&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Connected&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Disconnected&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Connection&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Connection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;ConnectionState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Connection&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;Disconnected&lt;/span&gt;
&lt;span class="c1"&gt;-- Connection {address = &amp;quot;0.0.0.0&amp;quot;, state = Disconnected}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What's a Monad? 😫&lt;/h2&gt;
&lt;p&gt;According to &lt;a href="https://wiki.haskell.org/Monad"&gt;Haskell Wiki&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The essence of monad is thus separation of composition timeline from the composed computation's execution timeline, as well as the ability of computation to implicitly carry extra data, as pertaining to the computation itself, in addition to its one (hence the name) output, that it will produce when run (or queried, or called upon)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that we've got that out of the way, let's talk &lt;strong&gt;Type Classes&lt;/strong&gt;!!&lt;/p&gt;
&lt;p&gt;Type Class is a way to declare a type signature and then, independently, write an implementation of this type signature for any data type in the system.&lt;/p&gt;
&lt;p&gt;Type Classes in Haskell are similar to Interfaces in Java and TypeScript. Both Type Classes and Interfaces describe a group of operations that can be performed on an object. Remember the example of a Comparable interface in Java. The difference is that we can make a data type part of a type class even if we don't have control over its source code.&lt;/p&gt;
&lt;p&gt;Let's say we are writing a library that converts values to their JSON representation. In Java, we can declare an interface "ConvertableToJSON" with one method convert() that returns a JSON representation of an object. Logically, String and Integer do have a JSON representation. But in practice, we can't make Integer or String classes implement this interface because we don't have control over their source code. We'll have to work around it somehow.&lt;/p&gt;
&lt;p&gt;In Haskell, on the other hand, we &lt;em&gt;can&lt;/em&gt; make Integer and String part of the ConvertableToJSON Type Class, no problem. We'll just have to implement convert() function for both of those data types.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// In Java...&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ConvertableToJSON&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ConvertableToJSON&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// Not OK :( We can&amp;#39;t redefine Integer&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ConvertableToJSON&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Defining type signature&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;ConvertableToJSON&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

&lt;span class="c1"&gt;-- Implementing the type class for a built-in data type&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;ConvertableToJSON&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="nf"&gt;convert&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;-- &amp;quot;1&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;-- Implementing the type class for a custom data type&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;ConvertableToJSON&lt;/span&gt; &lt;span class="kt"&gt;Person&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;{&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;surname&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;convert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Curry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- &amp;quot;{\&amp;quot;name\&amp;quot;:\&amp;quot;Haskell\&amp;quot;,\&amp;quot;surname\&amp;quot;:\&amp;quot;Curry\&amp;quot;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And &lt;em&gt;Monad&lt;/em&gt; is just another type class. There you go 🎩&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Hope this was useful! Let us know what you think about the episode and ask questions if you have any here: https://discuss.codepodcast.com/t/episode-5-type-systems/22&lt;/p&gt;
&lt;p&gt;Talk to you then!&lt;/p&gt;</content><category term="code"></category><category term="script"></category></entry><entry><title>Bonus Episode: Edwin Brady on Dependent Types And Idris</title><link href="http://codepodcast.com/s0e5-bonus.html" rel="alternate"></link><published>2017-03-02T00:00:00+00:00</published><updated>2017-03-02T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2017-03-02:/s0e5-bonus.html</id><summary type="html">&lt;p&gt;Bonus to Episode #5. Type systems. Guests: Edwin Brady &lt;a href="https://twitter.com/edwinbrady"&gt;twitter.com/edwinbrady&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/308057597&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;An unabridged version of the interview with Edwin Brady, the creator of Idris. Talking about the language itself, the concept of Dependent Types and the future of Type Systems.&lt;/p&gt;
&lt;p&gt;Code Podcast Forum: &lt;a href="https://discuss.codepodcast.com/t/episode-5-type-systems/22"&gt;discuss.codepodcast.com/t/episode-5-t…pe-systems/22&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Episode produced by:
- &lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;
- &lt;strong&gt;Dark side:&lt;/strong&gt; Michael Beschastnov&lt;/p&gt;
&lt;p&gt;Guest:
- &lt;strong&gt;Edwin Brady&lt;/strong&gt; &lt;a href="https://twitter.com/edwinbrady"&gt;twitter.com/edwinbrady&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Type-Driven Development with Idris [tinyurl.com/typedd][https://www.manning.com/books/type-driven-development-with-idris]&lt;/li&gt;
&lt;li&gt;Idris Tutorial &lt;a href="http://docs.idris-lang.org/en/latest/tutorial/index.html#tutorial-index"&gt;docs.idris-lang.org/en/latest/tutor…#tutorial-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LightYear – Parser Combinator for Idris &lt;a href="https://github.com/ziman/lightyear"&gt;github.com/ziman/lightyear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quantities – Type-safe physical computations and unit conversions in Idris &lt;a href="https://github.com/timjb/quantities"&gt;github.com/timjb/quantities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Music&lt;/h3&gt;
&lt;p&gt;Mid-Air! &lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="code"></category><category term="podcast"></category></entry><entry><title>Episode 5. Type Systems</title><link href="http://codepodcast.com/s0e5.html" rel="alternate"></link><published>2017-02-16T00:00:00+00:00</published><updated>2017-02-16T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2017-02-16:/s0e5.html</id><summary type="html">&lt;p&gt;Episode #5. Type systems. Guests: Joseph Abrahamson &lt;a href="https://twitter.com/sdbo"&gt;twitter.com/sdbo&lt;/a&gt; Radoslav Kirov &lt;a href="https://twitter.com/radokirov"&gt;twitter.com/radokirov&lt;/a&gt; Erlend Hamberg &lt;a href="https://twitter.com/ehamberg"&gt;twitter.com/ehamberg&lt;/a&gt; Edwin Brady &lt;a href="https://twitter.com/edwinbrady"&gt;twitter.com/edwinbrady&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/307581943&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Episode discussion thread: &lt;a href="https://discuss.codepodcast.com/t/episode-5-type-systems/22"&gt;discuss.codepodcast.com/t/episode-5-t…pe-systems/22&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Type Systems&lt;/h2&gt;
&lt;p&gt;Your favorite features of Type Systems in one episode! Interfaces, Generics, ADT, Type Classes and Dependent Types. We'll talk about what they are and how they shape the way we work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dark side:&lt;/strong&gt; Michael Beschastnov&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Joseph Abrahamson&lt;/strong&gt; &lt;a href="https://twitter.com/sdbo"&gt;twitter.com/sdbo&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Radoslav Kirov&lt;/strong&gt; &lt;a href="https://twitter.com/radokirov"&gt;twitter.com/radokirov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Erlend Hamberg&lt;/strong&gt; &lt;a href="https://twitter.com/ehamberg"&gt;twitter.com/ehamberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edwin Brady&lt;/strong&gt; &lt;a href="https://twitter.com/edwinbrady"&gt;twitter.com/edwinbrady&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Special thanks to our reviewers, this time&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adriano Melo&lt;/strong&gt; &lt;a href="https://twitter.com/AdrianoMelo"&gt;twitter.com/AdrianoMelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Roman Liutikov&lt;/strong&gt; &lt;a href="https://twitter.com/roman01la"&gt;twitter.com/roman01la&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links: Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Benjamin C. Pierce "Types and Programming Languages" &lt;a href="https://www.cis.upenn.edu/~bcpierce/tapl/"&gt;www.cis.upenn.edu/~bcpierce/tapl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A draft of the book available for free &lt;a href="http://ropas.snu.ac.kr/~kwang/520/pierce_book.pdf"&gt;ropas.snu.ac.kr/~kwang/520/pierce_book.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rob Nederpelt and Herman Geuvers "Type Theory and formal proof" &lt;a href="http://www.win.tue.nl/~wsinrpn/book_type_theory.htm"&gt;www.win.tue.nl/~wsinrpn/book_type_theory.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Robert Harper "Practical Foundations for Programming Languages" &lt;a href="https://www.cs.cmu.edu/~rwh/pfpl.html"&gt;www.cs.cmu.edu/~rwh/pfpl.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design — PART I &lt;a href="https://notamonadtutorial.com/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd#.9gmbqkdx5"&gt;notamonadtutorial.com/interview-with…fbd#.rawqi9bvp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Paper by Xavier Leroy "Manifest Types, Modules, and Separate Compilation" (1994) &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.14.3950"&gt;citeseerx.ist.psu.edu/viewdoc/summar…10.1.1.14.3950&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Paper by Conor McBride and Ross Paterson "FUNCTIONAL PEARL: Applicative programming with effects" &lt;a href="http://strictlypositive.org/IdiomLite.pdf"&gt;strictlypositive.org/IdiomLite.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links: Idris&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Edwin Brady "Type-Driven Development with Idris" &lt;a href="https://tinyurl.com/typedd"&gt;tinyurl.com/typedd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links: TypeScript&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.typescriptlang.org/"&gt;www.typescriptlang.org/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Links: Haskell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Christopher Allen and Julie Moronuki "Haskell Programming from First Principles" &lt;a href="http://haskellbook.com/"&gt;haskellbook.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn you some Haskell &lt;a href="http://learnyouahaskell.com/"&gt;learnyouahaskell.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links: Scala&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Paul Chiusano and Rúnar Bjarnason "Functional Programming in Scala" &lt;a href="https://www.manning.com/books/functional-programming-in-scala"&gt;www.manning.com/books/functional-…gramming-in-scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links: OCaml&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Yaron Minsky, Anil Madhavapeddy, Jason Hickey "Real World Ocaml" &lt;a href="https://realworldocaml.org/"&gt;realworldocaml.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A chapter from "Real World Ocaml" about Objects &lt;a href="https://realworldocaml.org/v1/en/html/objects.html"&gt;realworldocaml.org/v1/en/html/objects.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OCaml Documentation &lt;a href="http://caml.inria.fr/pub/docs/manual-ocaml/"&gt;caml.inria.fr/pub/docs/manual-ocaml/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Effective ML (video) &lt;a href="https://blogs.janestreet.com/effective-ml-video/"&gt;blogs.janestreet.com/effective-ml-video/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links: Discussions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What exactly makes the Haskell type system so revered (vs say, Java)? &lt;a href="http://softwareengineering.stackexchange.com/questions/279316/what-exactly-makes-the-haskell-type-system-so-revered-vs-say-java"&gt;softwareengineering.stackexchange.com/questi…y-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What is a Functor? &lt;a href="http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor#2031421"&gt;stackoverflow.com/questions/203086…-functor#2031421&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ADTs vs Inheritance &lt;a href="http://stackoverflow.com/questions/3271974/why-adts-are-good-and-inheritance-is-bad"&gt;stackoverflow.com/questions/327197…heritance-is-bad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Existential vs Universal Typess &lt;a href="http://stackoverflow.com/questions/14299638/existential-vs-universally-quantified-types-in-haskell#14299983"&gt;stackoverflow.com/questions/142996…haskell#14299983&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Subclassing vs Subtyping &lt;a href="http://www.cs.princeton.edu/courses/archive/fall98/cs441/mainus/node12.html"&gt;www.cs.princeton.edu/courses/archiv…us/node12.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why Haskell has no subtyping &lt;a href="https://www.reddit.com/r/haskell/comments/423o0c/why_no_subtypingsubtype_polymorphism/"&gt;www.reddit.com/r/haskell/comment…ype_polymorphism/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell vs Java type systems &lt;a href="http://softwareengineering.stackexchange.com/questions/279316/what-exactly-makes-the-haskell-type-system-so-revered-vs-say-java"&gt;softwareengineering.stackexchange.com/questi…y-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Music&lt;/h3&gt;
&lt;p&gt;Mid-Air! &lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="code"></category><category term="podcast"></category></entry><entry><title>Episode 4. How to design software</title><link href="http://codepodcast.com/s0e4.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-08-01:/s0e4.html</id><summary type="html">&lt;p&gt;Episode #4. How to design software?. Guests: Craig Andera &lt;a href="https://twitter.com/craigandera"&gt;twitter.com/craigandera&lt;/a&gt; Eric Elliott &lt;a href="https://twitter.com/_ericelliott"&gt;twitter.com/_ericelliott&lt;/a&gt; Mario Zechner &lt;a href="https://twitter.com/badlogicgames"&gt;twitter.com/badlogicgames&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/276367693&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;h2&gt;How to design software&lt;/h2&gt;
&lt;p&gt;How to design software? What are the techniques we can use? How can we become better at it? We`ve interviewed 3 engineers with completely different backgrounds to find out.&lt;/p&gt;
&lt;p&gt;Please send us stories about your awkward tech talks!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/podcastcode"&gt;@podcastcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;andrey@codepodcast.com or michael@codepodcast.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dark side:&lt;/strong&gt; Michael Beschastnov&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Craig Andera&lt;/strong&gt; &lt;a href="https://twitter.com/craigandera"&gt;twitter.com/craigandera&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eric Elliott&lt;/strong&gt; &lt;a href="https://twitter.com/_ericelliott"&gt;twitter.com/_ericelliott&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mario Zechner&lt;/strong&gt; &lt;a href="https://twitter.com/badlogicgames"&gt;twitter.com/badlogicgames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A much smarter way to spend your money&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture by Martin Fowler &lt;a href="http://www.goodreads.com/book/show/70156.Patterns_of_Enterprise_Application_Architecture"&gt;www.goodreads.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example by Kent Beck &lt;a href="http://www.goodreads.com/book/show/387190.Test_Driven_Development"&gt;www.goodreads.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tricks of the 3D Game Programming Gurus by Andre LaMothe &lt;a href="http://www.goodreads.com/book/show/2042298.Tricks_of_the_3D_Game_Programming_Gurus"&gt;www.goodreads.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The dragon book by Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman &lt;a href="http://www.goodreads.com/book/show/703102.Compilers"&gt;www.goodreads.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mentions by Craig&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cognitect &lt;a href="http://cognitect.com"&gt;cognitect.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cognicast &lt;a href="http://blog.cognitect.com/cognicast/"&gt;blog.cognitect.com/cognicast/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You Are Not So Smart Podcast &lt;a href="http://youarenotsosmart.com/podcast/"&gt;youarenotsosmart.com/podcast/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rich Hickey, creator of Clojure PL &lt;a href="https://twitter.com/richhickey"&gt;twitter.com/richhickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mentions by Eric&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Blog &lt;a href="https://medium.com/@_ericelliott"&gt;_ericelliott&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Online Course &lt;a href="https://ericelliottjs.com/"&gt;ericelliottjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mentions by Mario&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LibGDX &lt;a href="http://libgdx.badlogicgames.com/"&gt;libgdx.badlogicgames.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gamefromscratch.com/"&gt;www.gamefromscratch.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Music&lt;/h3&gt;
&lt;p&gt;Mid-Air! &lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="code"></category><category term="podcast"></category></entry><entry><title>Episode 3. Concurrency – Event loop &amp; Coroutines</title><link href="http://codepodcast.com/s0e3.html" rel="alternate"></link><published>2016-04-15T00:00:00+00:00</published><updated>2016-04-15T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-04-15:/s0e3.html</id><summary type="html">&lt;p&gt;Episode #3. Concurrency – Event loops &amp;amp; Сoroutines. Guests: A. Jesse Jiryu Davis &lt;a href="https://emptysqua.re/blog/"&gt;emptysqua.re/&lt;/a&gt; and Saúl Ibarra Corretgé &lt;a href="https://about.me/saghul"&gt;about.me/saghul&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/259065020&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;h2&gt;Concurrency - Event loop &amp;amp; Coroutines&lt;/h2&gt;
&lt;p&gt;Let`s escape the world where the Big Brother constantly interrupts you. Free
ourselves from the oppression of consumerism. Forget about preemptive
multitasking and enter the world of collaboration! Today we are talking about
Event Loop and Coroutines.&lt;/p&gt;
&lt;p&gt;Please send us stories about your awkward tech talks!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/podcastcode"&gt;@podcastcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;andrey@codepodcast.com or michael@codepodcast.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dark side:&lt;/strong&gt; Michael Beschastnov&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A. Jesse Jiryu Davis&lt;/strong&gt; &lt;a href="https://emptysqua.re/blog/"&gt;emptysqua.re/&lt;/a&gt; &lt;a href="https://github.com/ajdavis"&gt;github.com/ajdavis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Saúl Ibarra Corretgé&lt;/strong&gt; &lt;a href="https://about.me/saghul"&gt;about.me/saghul&lt;/a&gt; &lt;a href="https://github.com/saghul"&gt;github/saghul&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A much smarter way to spend your money&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The Architecture of Open Source Applications &lt;a href="http://aosabook.org/en/buy.html#vol1"&gt;aosabook.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Event loops&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;What the heck is the event loop anyway? by Philip Roberts &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;youtube.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An Introduction to libuv by Nikhil Marathe &lt;a href="https://nikhilm.github.io/uvbook/"&gt;nikhilm.github.io/uvbook/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Taming the asynchronous beast with ES7 by Nolan Lawson &lt;a href="https://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html"&gt;https://pouchdb.com/2015/03/05/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How the heck does async/await work in Python 3.5? by Brett Cannon &lt;a href="http://www.snarky.ca/how-the-heck-does-async-await-work-in-python-3-5"&gt;www.snarky.ca/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coroutines&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Coroutines Live-Coding Demonstration, at SCALE14x by A. Jesse Jiryu Davis &lt;a href="https://emptysqua.re/blog/scale14x-coroutines-talk/"&gt;emptysqua.re/blog/scale14x-coroutines-talk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Web Crawler With asyncio Coroutines from The Architecture Of Open Source Applications by A. Jesse Jiryu Davis and Guido van Rossum &lt;a href="http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html"&gt;aosabook.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unyielding by Glyph Lefkowitz &lt;a href="https://glyph.twistedmatrix.com/2014/02/unyielding.html"&gt;glyph.twistedmatrix.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Curious Course on Coroutines and Concurrency by David Beazley &lt;a href="http://www.dabeaz.com/coroutines/"&gt;www.dabeaz.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generator Tricks for Systems Programmers by David Beazley &lt;a href="http://www.dabeaz.com/generators/"&gt;www.dabeaz.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects to check out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Pyuv &lt;a href="https://github.com/saghul/pyuv"&gt;github.com/saghul/pyuv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pymongo &lt;a href="https://api.mongodb.org/python/current/index.html"&gt;api.mongodb.org/python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Asyncio &lt;a href="http://asyncio.org/"&gt;asyncio.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;curio - concurrent I/O &lt;a href="https://github.com/dabeaz/curio"&gt;github.com/dabeaz/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tornado Web Server &lt;a href="https://github.com/tornadoweb/tornado"&gt;github.com/tornadoweb/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;libuv &lt;a href="http://docs.libuv.org/en/v1.x/"&gt;docs.libuv.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Music&lt;/h3&gt;
&lt;p&gt;Mid-Air! &lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</content></entry><entry><title>Episode 2. Concurrency – CSP &amp; Actors</title><link href="http://codepodcast.com/s0e2.html" rel="alternate"></link><published>2016-02-24T00:00:00+00:00</published><updated>2016-02-24T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-02-24:/s0e2.html</id><summary type="html">&lt;p&gt;Episode #2. Concurrency – CSP &amp;amp; Actors. Guests: Aaron Schlesinger http://arschles.com/ and Jörgen Brandt http://www.joergen-brandt.de/&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/248919399&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;h2&gt;Concurrency – CSP &amp;amp; Actors&lt;/h2&gt;
&lt;p&gt;Multithreading is not the only approach we use to deal with concurrency. Single-purpose processes is our next frontier. Processes, that don`t have shared state. To coordinate, they pass messages to each other.&lt;/p&gt;
&lt;p&gt;We can build complex concurrent systems using simple principles of CSP or Actors model. We break down programs into independent processes, each performing some specific job, talking to each other. How they talk to each is the point of contention here. That`s where the differences between CSP and Actors arise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aaron Schlesinger&lt;/strong&gt; &lt;a href="http://arschles.com/"&gt;arschles.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jörgen Brandt&lt;/strong&gt; &lt;a href="http://www.joergen-brandt.de/"&gt;http://www.joergen-brandt.de/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“Communicating Sequential Processes” orignial paper by C. A. R. Hoare &lt;a href="http://www.usingcsp.com/cspbook.pdf"&gt;http://www.usingcsp.com/  cspbook.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;“Go in 5 minutes” screencast by Aaron &lt;a href="https://www.youtube.com/channel/UC2GHqYE3fVJMncbrRd8AqcA"&gt;https://www.youtube.com/channel/UC2GHqYE3fVJMncbrRd8AqcA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Effective Go” &lt;a href="https://golang.org/doc/effective_go.html"&gt;https://golang.org/doc/effective_go.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Go Concurrency Patterns” talk by Rob Pike &lt;a href="https://talks.golang.org/2012/concurrency.slide#1"&gt;https://talks.golang.org/2012/concurrency.slide#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;net.Context documentation: &lt;a href="https://godoc.org/golang.org/x/net/context"&gt;https://godoc.org/golang.org/x/net/context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebSockets documentation: &lt;a href="https://godoc.org/golang.org/x/net/websocket"&gt;https://godoc.org/golang.org/x/net/websocket&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Actors&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“A Universal Modular Actor Formalism for Artificial Intelligence” original paper by Carl Hewitt; Peter Bishop; Richard Steiger &lt;a href="http://worrydream.com/refs/Hewitt-ActorModel.pdf"&gt;http://worrydream.com/refs/Hewitt-ActorModel.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Erlang&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;“Learn You Some Erlang for great good!” by Fred Hébert &lt;a href="http://learnyousomeerlang.com/"&gt;http://learnyousomeerlang.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Programming Erlang” by Joe Armstrong &lt;a href="http://amzn.to/1UnfJpB"&gt;http://amzn.to/1UnfJpB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects to check out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Docker &lt;a href="https://github.com/docker/docker"&gt;https://github.com/docker/docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Awesome Go” – a curated list of awesome Go frameworks, libraries and software &lt;a href="https://github.com/avelino/awesome-go"&gt;https://github.  com/avelino/awesome-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallelism&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cuneiform &lt;a href="http://www.cuneiform-lang.org/"&gt;http://www.cuneiform-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Music&lt;/h3&gt;
&lt;p&gt;Mid-Air! &lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;PS: Links to Amazon are referral. You can use them to support the show.&lt;/p&gt;</content></entry><entry><title>Episode 1. Concurrency</title><link href="http://codepodcast.com/s0e1.html" rel="alternate"></link><published>2016-02-04T00:00:00+00:00</published><updated>2016-02-04T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-02-04:/s0e1.html</id><summary type="html">&lt;p&gt;First episode. Concurrency and multithreading. Speakers: Daniel Higginbotham, Steve Klabnik.&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/245483308&amp;amp;color=0066cc&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false"&gt;&lt;/iframe&gt;

&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;Laws of Newtonian mechanics don`t make sense as we get closer to the speed of light. Laws of serial execution are useless once we enter the world of concurrency.&lt;/p&gt;
&lt;p&gt;In this episode we&lt;code&gt;ll define concurrency and talk about why is it hard to write concurrent programs. With the help of Daniel and Steve we&lt;/code&gt;ll explore tools that are there in Clojure and Rust to help engineers deal with multiple threads of execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; Andrey Salomatin &lt;a href="https://twitter.com/filipovskii"&gt;twitter.com/filipovskii&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Guests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Daniel Higginbotham&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="www.flyingmachinestudios.com/"&gt;www.flyingmachinestudios.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nonrecursive"&gt;twitter.com/nonrecursive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steve Klabnik&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="www.steveklabnik.com/"&gt;www.steveklabnik.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/steveklabnik"&gt;twitter.com/steveklabnik&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IRC: steveklabnik&lt;/p&gt;
&lt;h3&gt;A much smarter way to spend your money&lt;/h3&gt;
&lt;p&gt;Clojure for the Brave and True, Daniel Higginbotham&lt;/p&gt;
&lt;p&gt;Online: &lt;a href="www.braveclojure.com/concurrency/"&gt;www.braveclojure.com/concurrency/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chapter about concurrency: &lt;a href="www.braveclojure.com/concurrency/"&gt;www.braveclojure.com/concurrency/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon: &lt;a href="www.amzn.to/1UOB49u"&gt;amzn.to/1UOB49u&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java Concurrency in Practice: &lt;a href="http://amzn.to/1PVlDbm"&gt;http://amzn.to/1PVlDbm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust Documentation: &lt;a href="http://www.rust-lang.org/documentation.html"&gt;http://www.rust-lang.org/documentation.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects to Check Out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;intermezzOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;intermezzOS is a teaching operating system, specifically focused on introducing systems programming concepts to experienced developers from other areas of programming.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://intermezzos.github.io"&gt;https://intermezzos.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Issues:
&lt;a href="https://github.com/intermezzOS/book/issues"&gt;https://github.com/intermezzOS/book/issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/intermezzOS/kernel/issues"&gt;https://github.com/intermezzOS/kernel/issues&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;Mid-Air!
&lt;a href="https://soundcloud.com/mid_air"&gt;@mid_air&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Episode 1 preview</title><link href="http://codepodcast.com/first-episode-preview.html" rel="alternate"></link><published>2016-01-31T00:00:00+00:00</published><updated>2016-01-31T19:30:00+00:00</updated><author><name>Michael Beschastnov | Andrey Salomatin</name></author><id>tag:codepodcast.com,2016-01-31:/first-episode-preview.html</id><summary type="html">&lt;p&gt;This is announcement of first episode. Code podcast&lt;/p&gt;</summary><content type="html">&lt;div class="addthis_sharing_toolbox"&gt;&lt;/div&gt;

&lt;p&gt;def post()&lt;/p&gt;
&lt;p&gt;Hi guys, super-excited to spread a bit of rumor around first episode of code podcast. 
In first post it was claimed that beautiful patterns are present in completely different environments and episode 0 will be so much more about it. 
Episode 0 main topic is concurrency. Oh yes, what can be more exciting than that? You`ll hear about threads, loops, processes, green threads and there will be several guests that we are not yet unveiling, but these will be mega-awesome folks that you do not want to miss. &lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;</content></entry></feed>